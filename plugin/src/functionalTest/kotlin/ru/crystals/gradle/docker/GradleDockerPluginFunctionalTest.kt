/*
 * This source file was generated by the Gradle 'init' task
 */
package ru.crystals.gradle.docker

import java.io.File
import kotlin.test.assertTrue
import kotlin.test.Test
import org.gradle.testkit.runner.GradleRunner
import org.junit.jupiter.api.io.TempDir

/**
 * A simple functional test for the 'ru.crystals.docker' plugin.
 */
class GradleDockerPluginFunctionalTest {

    @field:TempDir
    lateinit var projectDir: File

    private val buildFile by lazy { projectDir.resolve("build.gradle") }
    private val settingsFile by lazy { projectDir.resolve("settings.gradle") }

    @Test fun `can run task`() {
        // Set up the test build
        settingsFile.writeText("")
        buildFile.writeText("""
            plugins {
                id('ru.crystals.docker')
            }
            
            docker {
                name = 'test-image'
            }
        """.trimIndent())

        // Create a simple Dockerfile for the test
        val dockerfile = projectDir.resolve("Dockerfile")
        dockerfile.writeText("""
            FROM alpine:latest
            RUN echo "Hello from test Docker image"
        """.trimIndent())

        // Run the build to check if tasks are created
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("--stacktrace", "tasks", "--group", "Docker")
        runner.withProjectDir(projectDir)
        val result = runner.build()

        // Verify that Docker tasks are created
        assertTrue(result.output.contains("docker"))
        assertTrue(result.output.contains("dockerClean"))
        assertTrue(result.output.contains("dockerPush"))
    }
}
